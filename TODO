* Local sinking support

As per =parkour.inspect= / =parkour.graph.dseq=.

* Integration for writing other Hadoop classes

** Input formats
** Output formats
** (Raw)Comparators
** Writables (?)
** Other things?

* Logging

- Splits being processed by individual tasks
- Probably other logging?

* Use class loader instead of pools

The current implementation builds small statically-compiled pools of
var-trampolining implementations of the various Hadoop classes which Hadoop
expects to locate via name-based reflection.  A more general implementation
would use a custom ClassLoader which could dynamically generate and return new
instances of the supported types.

* Clojure/Abracad AvroKeyValueInputFormat

The =AvroKeyValueInputFormat= class only works in terms of =GenericRecord=
instances, and thus doesnâ€™t work with Abracad.  Need to either figure out a way
to make it work generically (hard) or implement internal version which works
with Abracad-produced Clojure vectors.
