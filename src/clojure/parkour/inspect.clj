(ns parkour.inspect
  (:require [clojure.core.protocols :as ccp]
            [parkour (conf :as conf) (wrapper :as w)]
            [parkour.inspect (mapred :as mr1) (mapreduce :as mr2)]))

(defn records-seqable
  "Return `.close`-able handle to the input records generated by
configuration `conf`.  Result is `seq`-able; the resulting sequence
contains the results of applying `f` to a vector of each key-value
tuple as it is read, or `w/unwrap`-ing the key & value if not
provided.  An explicit InputFormat `klass` and `paths` may be
provided, which will be inferred from the `conf` if not."
  {:tag 'java.io.Closeable}
  ([conf] (records-seqable conf w/unwrap-all))
  ([conf f]
     (let [conf (conf/ig conf)]
       (->> (or (.getClass conf "mapreduce.inputformat.class" nil)
                (.getClass conf "mapred.input.format.class" nil))
            (records-seqable conf f))))
  ([conf f klass & paths]
     (let [conf (conf/iguration conf)
           rsf (cond (mr1/input-format? klass) mr1/records-seqable
                     (mr2/input-format? klass) mr2/records-seqable
                     :else (throw (ex-info "Not an input format"
                                           {:class klass})))]
       (apply rsf conf f klass paths))))
